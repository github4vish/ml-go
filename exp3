package main

import (
	"fmt"
	"sync"
	"time"
)

type CacheItem struct {
	Value      interface{}
	Expiration int64
}

type Cache struct {
	items map[string]CacheItem
	mu    sync.RWMutex
}

func NewCache() *Cache {
	return &Cache{items: make(map[string]CacheItem)}
}

func (c *Cache) Set(key string, value interface{}, duration time.Duration) {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.items[key] = CacheItem{Value: value, Expiration: time.Now().Add(duration).UnixNano()}
}

func (c *Cache) Get(key string) (interface{}, bool) {
	c.mu.RLock()
	defer c.mu.RUnlock()
	item, found := c.items[key]
	if !found || time.Now().UnixNano() > item.Expiration {
		return nil, false
	}
	return item.Value, true
}

func main() {
	cache := NewCache()
	cache.Set("foo", "bar", 5*time.Second)
	cache.Set("baz", "qux", 10*time.Second)

	if value, found := cache.Get("foo"); found {
		fmt.Printf("Found value for key 'foo': %v\n", value)
	} else {
		fmt.Println("Value not found or expired for key 'foo'")
	}

	if value, found := cache.Get("baz"); found {
		fmt.Printf("Found value for key 'baz': %v\n", value)
	} else {
		fmt.Println("Value not found or expired for key 'baz'")
	}

	time.Sleep(6 * time.Second)

	if value, found := cache.Get("foo"); found {
		fmt.Printf("Found value for key 'foo': %v\n", value)
	} else {
		fmt.Println("Value not found or expired for key 'foo'")
	}

	if value, found := cache.Get("baz"); found {
		fmt.Printf("Found value for key 'baz': %v\n", value)
	} else {
		fmt.Println("Value not found or expired for key 'baz'")
	}
}
