package main

import (
	"fmt"
	"log"
	"os"
	"strconv"

	"github.com/go-gota/gota/dataframe"
	"gonum.org/v1/gonum/mat"
	"gonum.org/v1/gonum/stat"
)

func main() {
	// Load CSV data using Gota
	file, err := os.Open("data.csv")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	df := dataframe.ReadCSV(file)

	// Create slices for independent (X) and dependent (Y) variables
	xData := make([]float64, df.Nrow())
	yData := make([]float64, df.Nrow())

	for i := 0; i < df.Nrow(); i++ {
		xData[i], _ = strconv.ParseFloat(df.Elem(i, 0).String(), 64) // X column
		yData[i], _ = strconv.ParseFloat(df.Elem(i, 1).String(), 64) // Y column
	}

	// Create a matrix for the independent variable (X)
	x := mat.NewDense(len(xData), 2, nil) // 2 columns: intercept and independent variable
	for i, val := range xData {
		x.Set(i, 0, 1)   // Intercept term
		x.Set(i, 1, val) // Independent variable value
	}

	// Create a vector for the dependent variable (Y)
	y := mat.NewVecDense(len(yData), yData)

	// Create a vector to hold the weights (coefficients)
	var weights mat.VecDense

	// Perform linear regression
	err = stat.LinearRegression(x, y, &weights, nil) // Change here to handle two return values
	if err != nil {
		log.Fatal(err)
	}

	// Output the weights (coefficients)
	fmt.Printf("Weights: %v\n", weights.RawVector().Data)
}
